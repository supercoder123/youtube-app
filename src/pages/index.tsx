import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useCallback, useEffect, useState } from 'react';
import VideoCard from '../components/VideoCard/VideoCard';
import update from 'immutability-helper';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { DndProvider } from 'react-dnd';
import { YoutubeChannelResponse, YoutubeVideoItem, YoutubeVideosResponse } from '../types';
import { client } from '../redis/redis-client';


const Home: NextPage<{ videos: YoutubeVideosResponse, channel: YoutubeChannelResponse }> = ({ videos, channel }: { videos: YoutubeVideosResponse, channel: YoutubeChannelResponse }) => {
  const [cards, setCards] = useState<YoutubeVideosResponse['items']>(videos.items);
  const [reorderedCards, setReorderedCards] = useState<any>();

  const moveCard = useCallback((dragIndex: number, hoverIndex: number) => {

    setCards((prevCards: any) =>
      update(prevCards, {
        $splice: [
          [dragIndex, 1],
          [hoverIndex, 0, prevCards[dragIndex] as any],
        ],
      })
    );
  }, []);

  useEffect(() => {
    const updatedCards = cards.map((card: YoutubeVideoItem, i) => {
      if (card.snippet.position !== i) {
        card.snippet.newPosition = i;
        return {
          id: card.id,
          position: card.snippet.position,
          newPosition: i
        };
      }
      return null;
    }).filter((val) => val);
    setReorderedCards(updatedCards);

  }, [cards]);

  useEffect(() => {
    console.log(reorderedCards);
    
  }, [reorderedCards])

  function saveOrder() {
    fetch('/api/set-videos', {
      method: 'POST',
      body: JSON.stringify(reorderedCards),
    });
  }


  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="w-full">
          <h1 className="text-2xl text-center">{channel.items[0].snippet.title}</h1>

          <button
            className='px-4 py-1 text-sm text-purple-600 font-semibold rounded-full border border-purple-200 hover:text-white hover:bg-purple-600 hover:border-transparent focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-offset-2'
            onClick={() => {
              saveOrder();
            }}
            >
            Save
          </button>

          <div className="grid lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1 items-center">
            <DndProvider backend={HTML5Backend}>

              {
                cards.map((video, index) => {
                  return <VideoCard key={video.id} id={video.id} index={index} video={video} moveCard={moveCard} />
                })
              }
            </DndProvider>
          </div>


        </div>
      </main>

      <footer>

      </footer>
    </div>
  )
}

export async function getStaticProps(context: any) {
  const API_KEY = 'AIzaSyC4eoBC80aEtdnjIgbL4A9vyJqln1w22us';
  const channelListUrl = `https://youtube.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics&id=UCDt-2KorfMpzLf-CX71n18A&key=${API_KEY}`;
  
  const channelData: YoutubeChannelResponse = await (await fetch(channelListUrl)).json();
  const playListId = channelData.items[0].contentDetails.relatedPlaylists.uploads;
  const videoData: YoutubeVideosResponse = await (await fetch(`https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=${playListId}&key=${API_KEY}`)).json();

  for (let i=0; i<videoData.items.length; i++) {
    const reorderedVideo = await client.get(videoData.items[i].id);
    if (reorderedVideo) {
      // console.log(reorderedVideo)
      const cacheData = JSON.parse(reorderedVideo);
      videoData.items[i].snippet.position = cacheData.position;
    }
  }

  videoData.items.sort((a, b) => a.snippet.position - b.snippet.position);

  return {
    props: {
      videos: videoData,
      channel: channelData
    }, // will be passed to the page component as props
  }
}

export default Home
